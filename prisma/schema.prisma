// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userName  String    @unique
  email     String    @unique
  hash      String
  image     String?
  firstName String?
  secret    String?
  twoFa     Boolean   @default(false)
  twofaCheck Boolean   @default(false)
  lastName  String?
  token     Boolean   @default(false)
  game      GameData[]
  online    Boolean   @default(false)
  sentRequests   FriendRequest[] @relation("Sender")
  friendRequests    FriendRequest[] @relation("Receiver")
  update    Boolean   @default(false)
  rooms     UserRoom[]
  messages  Message[]
  conv      Converstaion[]
  friends         Friends[]       @relation("Friends")
  friendsReceived Friends[]       @relation("friendsReceived")
  seenMsj         ReadBy[]
  notifications   Notification[] 
  @@map("Users")
}

model Friends {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?      @relation("Friends", fields: [userId], references: [id])
  userId    Int?
  friendsReceived    User?     @relation("friendsReceived", fields: [friendsReceivid], references: [id])
  friendsReceivid  Int?
  @@unique([userId, friendsReceivid ])
  @@map("Friends")
}

model Notification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  user      User?      @relation(fields: [userId], references: [id])
  userId    Int?
  image     String?  @default("https://res.cloudinary.com/dkkgmzpqd/image/upload/v1626820134/default-user-image.jpg")
  userName  String
  content   String
  seen      Boolean   @default(false)
  @@map("Notifications")
}

// model Message {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   content   String
//   sender    User?      @relation("Sender", fields: [senderId], references: [id])
//   senderId  Int?
//   receiver  User?     @relation("Receiver", fields: [receiverId], references: [id])
//   receiverId Int?
//   @@map("Messages")
// }

model FriendRequest {
  id        Int       @id @default(autoincrement())
  blockedById Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sender    User?      @relation("Sender", fields: [senderId], references: [id])
  senderId  Int?
  receiver  User?     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId Int?
  accepted Boolean @default(false)
  blocked  Boolean @default(false)
  @@unique([senderId, receiverId ])
  @@map("FriendRequests")
}


model GameData {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  gameName  String?
  users     User[]
  // whatchingUser User[] @relation("WatchingUser")
  @@map("GameDatas")
}

// model Game {
//   id         Int       @id @default(autoincrement())
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   gameName   String
//   gameDataId Int
//   gameData   GameData  @relation(fields: [gameDataId], references: [id])
  
//   @@map("Games")
// }

// chat schema 


model Converstaion {
    id       Int       @id @default(autoincrement())
    users    User[]
    messages Message[]

    // lastMsjAt DateTime
}


model Room {
    id   Int      @id @default(autoincrement())
    name String   @unique
    type ROOMTYPE @default(PUBLIC)
    password String?
    image String?

    users    UserRoom[]
    messages Message[]

    // lastMsjAt DateTime
}

// model Read {
//   id Int @id @default(autoincrement())

//   isRead Boolean
//   user User @relation(fields: [userId], references: [id])
//   userId Int
// }

model ReadBy {
  id Int @id @default(autoincrement())

  message    Message @relation(fields: [messsageId], references: [id])
  messsageId Int @unique
  users      User[]
}

model Message {
    id        Int           @id @default(autoincrement())
    content   String
    createdAt DateTime      @default(now())
    room      Room?         @relation(fields: [roomId], references: [id])
    roomId    Int?
    conv      Converstaion? @relation(fields: [convId], references: [id])
    convId    Int?
    user      User          @relation(fields: [userId], references: [id])
    userId    Int

    readBy   ReadBy?
}

model UserRoom {
    id       Int      @id @default(autoincrement())
    user     User     @relation(fields: [userId], references: [id])
    userId   Int
    room     Room     @relation(fields: [roomId], references: [id])
    roomId   Int
    userRole ROLE     @default(USER)
    joinedAt DateTime @default(now())

    // isRead Boolean

    @@unique([userId, roomId])
}

enum ROLE {
    USER
    ADMIN
    OWNER
}

enum ROOMTYPE {
    PUBLIC
    PROTECTED
    PRIVATE
}

